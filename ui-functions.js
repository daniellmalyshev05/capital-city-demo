// ui-functions.js

function createUIPanel(scene, type, data = {}) {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π UI, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (scene.uiContainer) return;

    const centerX = scene.cameras.main.centerX;
    const centerY = scene.cameras.main.centerY;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
    scene.uiContainer = scene.add.container(centerX, centerY).setDepth(20000);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    const background = scene.add.graphics().fillStyle(0x000000, 0.7).fillRect(-centerX, -centerY, 1080, 1920);
    scene.uiContainer.add(background);

    // --- 1. –ü–ê–ù–ï–õ–¨ –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê ---
    if (type === 'build') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xeeeeee, 1).fillRoundedRect(-350, -400, 700, 800, 16).strokeRoundedRect(-350, -400, 700, 800, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ß—Ç–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å?', { fontSize: '48px', color: '#ffffff' }).setOrigin(0.5));

        let yPos = -250;
        for (const key in BUILDINGS_DATA) {
            const building = BUILDINGS_DATA[key];
            // –ù–û–í–ê–Ø, –ï–î–ò–ù–°–¢–í–ï–ù–ù–û –í–ï–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:
            // –ó–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –¥–ª—è –Ω–µ–≥–æ –ù–ï–¢ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –∫–≤–µ—Å—Ç—É (–∫–∞–∫ —É –±–∞–Ω–∫–∞),
            // –ò–õ–ò –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π ID –∫–≤–µ—Å—Ç–∞ –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Ç—Ä–µ–±—É–µ–º–æ–º—É.
            const isUnlocked = !building.requiredQuestId || scene.currentQuestId >= building.requiredQuestId;
            const canAfford = scene.playerCoins >= building.cost;

            let buttonText = `[ ${building.name} (${building.cost}) ]`;
            let buttonBgColor = '#008800'; // –ó–µ–ª–µ–Ω—ã–π - –º–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å

            if (!isUnlocked) {
                buttonText = `[ ${building.name}\n(–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç) ]`;
                buttonBgColor = '#555555'; // –°–µ—Ä—ã–π - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É—Ä–æ–≤–Ω—é
            } else if (!canAfford) {
                buttonBgColor = '#880000'; // –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
            }

            const button = scene.add.text(0, yPos, buttonText, { fontSize: '36px', backgroundColor: buttonBgColor, padding: { x: 20, y: 10 } }).setOrigin(0.5);

            if (isUnlocked && canAfford) {
                button.setInteractive({ cursor: 'pointer' });
                button.on('pointerdown', () => scene.buildBuilding(key));
            }
            scene.uiContainer.add(button);
            yPos += 120;
        }

        const noButton = scene.add.text(0, 450, '[ –û—Ç–º–µ–Ω–∞ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        noButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(noButton);
    }
    // --- 2. –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–î–ê–ù–ò–ï–ú ---
    else if (type === 'building') {
        const info = scene.lastSelectedBuilding.getData('buildingInfo');
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xecf0f1, 1).fillRoundedRect(-350, -450, 700, 900, 16).strokeRoundedRect(-350, -450, 700, 900, 16);
        scene.uiContainer.add(panel);

        const buildingLevel = info.level || 1;
        scene.uiContainer.add(scene.add.text(0, -400, `${info.name} (LVL ${buildingLevel})`, { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));

        const notificationText = scene.add.text(0, 380, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add(notificationText);
        scene.uiContainer.setData('notification', notificationText);

        let yPos = -280;

        // –ë–õ–û–ö –ò–ù–§–û–ì–†–ê–§–ò–ö–ò
        if (info.bonuses) {
            if (info.bonuses.population) {
                scene.uiContainer.add(scene.add.text(-320, yPos, `üíö ${info.bonuses.population.text}`, { fontSize: '28px', color: '#2ecc71' }));
                yPos += 50;
            }
            if (info.bonuses.income) {
                scene.uiContainer.add(scene.add.text(-320, yPos, `üí∞ ${info.bonuses.income.text}`, { fontSize: '28px', color: '#f39c12' }));
                yPos += 50;
            }
        }
        yPos += 50;
        // –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (info.description) {
            scene.uiContainer.add(scene.add.text(0, yPos, info.description, { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 650 } }).setOrigin(0.5));
            yPos += 130; // –°–¥–≤–∏–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        }
        // –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–ª—É—á—à–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (info.upgrade && !info.level) { // info.level –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –∑–¥–∞–Ω–∏–π 1-–≥–æ —É—Ä–æ–≤–Ω—è
            const canAfford = scene.playerCoins >= info.upgrade.cost;
            const levelRequirementMet = scene.playerLevel >= info.upgrade.requiredLevel;
            let buttonText = `[ –£–ª—É—á—à–∏—Ç—å (${info.upgrade.cost}) ]`;
            let bgColor = '#e67e22'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å

            if (!levelRequirementMet) {
                buttonText = `[ –£–ª—É—á—à–∏—Ç—å (–Ω—É–∂–µ–Ω LVL ${info.upgrade.requiredLevel}) ]`;
                bgColor = '#555555'; // –°–µ—Ä—ã–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            } else if (!canAfford) {
                // –ö—Ä–∞—Å–Ω—ã–π, –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ (—ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è)
                bgColor = '#880000'; 
            }

            const upgradeButton = scene.add.text(0, yPos, buttonText, { fontSize: '32px', backgroundColor: bgColor, padding: { x: 15, y: 8 } }).setOrigin(0.5);

            if (canAfford && levelRequirementMet) {
                upgradeButton.setInteractive({ cursor: 'pointer' });
                upgradeButton.on('pointerdown', () => scene.upgradeBuilding());
            }
            scene.uiContainer.add(upgradeButton);
            yPos += 100;
        }
        // –ê –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (info.products && info.products.length > 0) {
            info.products.forEach(product => {
                const isUnlocked = buildingLevel >= product.requiredLevel;
                let buttonText = product.name;
                const buttonBgColor = isUnlocked ? '#3498db' : '#555555';

                if (!isUnlocked) {
                    buttonText = `${product.name}\n(–ù—É–∂–µ–Ω LVL 2 –∑–¥–∞–Ω–∏—è)`;
                }

                const productButtonStyle = { fontSize: '36px', backgroundColor: buttonBgColor, padding: { x: 25, y: 15 }, color: '#ecf0f1', wordWrap: { width: 500 }, align: 'center' };
                const productButton = scene.add.text(0, yPos, buttonText, productButtonStyle).setOrigin(0.5);

                if (isUnlocked) {
                    productButton.setInteractive({ cursor: 'pointer' });
                    productButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, product.id); });
                }
                scene.uiContainer.add(productButton);
                yPos += 180; // –£–≤–µ–ª–∏—á–∏–ª –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            });
        }
        // –ö–ù–û–ü–ö–ê –ó–ê–ö–†–´–¢–ò–Ø
        const closeButton = scene.add.image(350 - 30, -450 + 30, 'close_button').setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(closeButton);
    }
    // --- 3. –ü–ê–ù–ï–õ–ò –ü–†–û–î–£–ö–¢–û–í ---
    else if (type === 'product_deposit') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x77aaff, 1).fillRoundedRect(-400, -400, 800, 750, 16).strokeRoundedRect(-400, -400, 800, 750, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -250, '–í–ª–æ–∂–∏—Ç–µ –ö–æ–π–Ω—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.\n–°—Ç–∞–≤–∫–∞: –¥–æ 15% –≥–æ–¥–æ–≤—ã—Ö', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -50, `–¢–µ–∫—É—â–∏–π –≤–∫–ª–∞–¥: ${scene.depositAmount} –ö–æ–π–Ω–æ–≤`, { fontSize: '32px', color: '#aaffaa' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, 50, '–°—É–º–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∫–ª–∞–¥–∞:', { fontSize: '32px' }).setOrigin(0.5));

        const inputElement = document.getElementById('deposit-input');
        inputElement.style.display = 'block';
        const canvas = scene.sys.game.canvas;
        const gameScale = canvas.clientWidth / scene.sys.game.config.width;
        const inputHeight = 50 * gameScale;
        const canvasCenterX = canvas.offsetLeft + (canvas.clientWidth / 2);
        const canvasCenterY = canvas.offsetTop + (canvas.clientHeight / 2) + (85 * gameScale); // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        inputElement.style.left = `${canvasCenterX - (inputElement.offsetWidth / 2)}px`;
        inputElement.style.top = `${canvasCenterY - (inputHeight / 2)}px`;
        inputElement.style.transform = `scale(${gameScale})`;

        const yesButton = scene.add.text(-120, 230, '[ –í–ª–æ–∂–∏—Ç—å ]', { fontSize: '32px', backgroundColor: '#008800', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        yesButton.on('pointerdown', () => scene.makeDeposit());
        const noButton = scene.add.text(120, 230, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        noButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });
        // ui-functions.js - –≤ –±–ª–æ–∫–µ product_deposit
        const infoButton = scene.add.text(0, 300, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#77aaff' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/accounts/save-easy/'); // <-- –í–ê–®–ê –°–°–´–õ–ö–ê –ó–î–ï–°–¨
        });
        scene.uiContainer.add(infoButton);

        const notificationText = scene.add.text(0, 180, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5); // –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        scene.uiContainer.add([yesButton, noButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);
    }
    else if (type === 'product_credit') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0xffa07a, 1).fillRoundedRect(-400, -400, 800, 700, 16).strokeRoundedRect(-400, -400, 800, 700, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, '–ü–æ–ª—É—á–∏—Ç–µ –ö–æ–π–Ω—ã –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –Ω—É–∂–¥.\n–í–µ—Ä–Ω–∏—Ç–µ –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –∏–≥—Ä–æ–≤—ã—Ö –¥–Ω–µ–π,\n—á—Ç–æ–±—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç—ã.\n\n–†–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –¥–æ 180 –¥–Ω–µ–π –±–µ–∑ %', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));

        const backButton = scene.add.text(0, 280, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, 50, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.hasActiveCredit) {
            const repayButton = scene.add.text(0, 150, `[ –ü–æ–≥–∞—Å–∏—Ç—å ${scene.creditDebt} –ö ]`, { fontSize: '32px', backgroundColor: '#e67e22', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            repayButton.on('pointerdown', () => scene.repayCredit());
            scene.uiContainer.add(repayButton);
        } else {
            const getCreditButton = scene.add.text(0, 150, '[ –ü–æ–ª—É—á–∏—Ç—å 5000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#27ae60', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            getCreditButton.on('pointerdown', () => scene.takeCredit());
            scene.uiContainer.add(getCreditButton);
        }

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        const infoButton = scene.add.text(0, 220, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#ffA500' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/credit-cards/7950641/');
        });
        scene.uiContainer.add(infoButton);
    }
    else if (type === 'product_mortgage') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x9b59b6, 1).fillRoundedRect(-400, -400, 800, 700, 16).strokeRoundedRect(-400, -400, 800, 700, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ò–ø–æ—Ç–µ–∫–∞', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, `–°—Ä–æ–∫: 30 –¥–Ω–µ–π. –ü–ª–∞—Ç–µ–∂: ${scene.mortgagePayment}/–¥–µ–Ω—å.\n–ü–æ–ª—É—á–∏—Ç–µ –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏\n–ñ–∏–ª–æ–≥–æ –ö–≤–∞—Ä—Ç–∞–ª–∞.`, { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));
    
        const backButton = scene.add.text(0, 280, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });
    
        const notificationText = scene.add.text(0, 50, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (!scene.hasMortgage) {
            const getButton = scene.add.text(0, 150, '[ –ü–æ–ª—É—á–∏—Ç—å 70000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#8e44ad', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            getButton.on('pointerdown', () => scene.takeMortgage());
            scene.uiContainer.add(getButton);
        } else {
             scene.uiContainer.add(scene.add.text(0, 150, `–ò–ø–æ—Ç–µ–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!\n–û—Å—Ç–∞–ª–æ—Å—å: ${scene.mortgageDaysLeft} –¥.`, { fontSize: '36px', align: 'center', color: '#ffddaa' }).setOrigin(0.5));
        }

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        const infoButton = scene.add.text(0, 220, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#c39bd3' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/take_credit/mortgage/5546683/');
        });
        scene.uiContainer.add(infoButton);
    }
    else if (type === 'product_pds') {
        const panel = scene.add.graphics().fillStyle(0x3d3d5c, 1).lineStyle(2, 0xaaaaff, 1).fillRoundedRect(-400, -400, 800, 700, 16).strokeRoundedRect(-400, -400, 800, 700, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π', { fontSize: '42px', color: '#ecf0f1', wordWrap: { width: 750 }, align: 'center' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, '–í–ª–æ–∂–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –≥–æ—Å–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏\n–ø—Ä–æ–≥—Ä–∞–º–º—ã —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π.', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));

        const backButton = scene.add.text(0, 280, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, 50, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.pdsInvestment > 0) {
             scene.uiContainer.add(scene.add.text(0, 150, `–ù–∞–∫–æ–ø–ª–µ–Ω–æ –≤ –ü–î–°: ${Math.floor(scene.pdsInvestment)} –ö–æ–π–Ω–æ–≤\n–í–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑: ${scene.pdsMaturityDays} –¥.`, { fontSize: '36px', align: 'center', color: '#aaaaff' }).setOrigin(0.5));
        } else {
            const investButton = scene.add.text(0, 150, '[ –í–ª–æ–∂–∏—Ç—å 25000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#0055a4', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            investButton.on('pointerdown', () => scene.investInPDS());
            scene.uiContainer.add(investButton);
        }

        const infoButton = scene.add.text(0, 220, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#aaaaff' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/page/pds/');
        });
        scene.uiContainer.add(infoButton);
    }
    else if (type === 'product_cashback') {
        // –í—ã—Å–æ—Ç–∞ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∞ —Å 600 –¥–æ 650 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x2ecc71, 1).fillRoundedRect(-400, -350, 800, 650, 16).strokeRoundedRect(-400, -350, 800, 650, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -300, '–£–º–Ω–∞—è –∫–∞—Ä—Ç–∞', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -180, '–ü–æ–ª—É—á–∞–π—Ç–µ 5% –∫—ç—à–±—ç–∫–∞ —Å–æ –≤—Å–µ—Ö —Ç—Ä–∞—Ç\n–Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π!', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Å–¥–≤–∏–Ω—É—Ç–∞ –Ω–∏–∂–µ
        const backButton = scene.add.text(0, 260, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });
        scene.uiContainer.add(backButton);

        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞/—Ç–µ–∫—Å—Ç —Å–¥–≤–∏–Ω—É—Ç—ã –Ω–∏–∂–µ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
        if (scene.isCashbackActive) {
            const timerText = scene.add.text(0, 80, `–ö—ç—à–±—ç–∫ –∞–∫—Ç–∏–≤–µ–Ω!\n–û—Å—Ç–∞–ª–æ—Å—å: ${scene.cashbackDaysLeft} –¥.`, { fontSize: '36px', align: 'center', color: '#2ecc71' }).setOrigin(0.5);
            scene.uiContainer.add(timerText);
        } else {
            const activateButton = scene.add.text(0, 80, '[ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 10 –¥–Ω–µ–π ]', { fontSize: '32px', backgroundColor: '#27ae60', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            activateButton.on('pointerdown', () => scene.activateCashback());
            scene.uiContainer.add(activateButton);
        }

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        const infoButton = scene.add.text(0, 180, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#2ecc71' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/cards/7579039/');
        });
        scene.uiContainer.add(infoButton);
    }
    else if (type === 'product_insurance') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0xf1c40f, 1).fillRoundedRect(-400, -350, 800, 650, 16).strokeRoundedRect(-400, -350, 800, 650, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -300, '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -180, '–ó–∞—â–∏—Ç–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö\n—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ—Ç–µ—Ä—å –Ω–∞ 20 –¥–Ω–µ–π.', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));

        const backButton = scene.add.text(0, 250, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, -20, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.isInsured) {
            const timerText = scene.add.text(0, 80, `–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n–û—Å—Ç–∞–ª–æ—Å—å: ${scene.insuranceDaysLeft} –¥.`, { fontSize: '36px', align: 'center', color: '#f1c40f' }).setOrigin(0.5);
            scene.uiContainer.add(timerText);
        } else {
            const activateButton = scene.add.text(0, 80, '[ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞ 2000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#f39c12', padding: { x: 15, y: 8 }, color: '#000000' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            activateButton.on('pointerdown', () => scene.activateInsurance());
            scene.uiContainer.add(activateButton);
        }

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        const infoButton = scene.add.text(0, 180, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#f1c40f' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/page/insurance-service-products/');
        });
        scene.uiContainer.add(infoButton);
    }
    else if (type === 'product_cyber') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x1abc9c, 1).fillRoundedRect(-400, -350, 800, 650, 16).strokeRoundedRect(-400, -350, 800, 650, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -300, '–ó–∞—â–∏—Ç–∞ —Å—á–µ—Ç–æ–≤', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -180, '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∑–∞—â–∏—Ç—É –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤\n–∏ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö –∞—Ç–∞–∫ –Ω–∞ 20 –¥–Ω–µ–π.', { fontSize: '32px', align: 'center', color: '#cccccc', wordWrap: { width: 750 } }).setOrigin(0.5));

        const backButton = scene.add.text(0, 280, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, -20, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.isCyberProtected) {
            const timerText = scene.add.text(0, 80, `–ó–∞—â–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n–û—Å—Ç–∞–ª–æ—Å—å: ${scene.cyberProtectionDaysLeft} –¥.`, { fontSize: '36px', align: 'center', color: '#1abc9c' }).setOrigin(0.5);
            scene.uiContainer.add(timerText);
        } else {
            const activateButton = scene.add.text(0, 80, '[ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 1500 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#16a085', padding: { x: 15, y: 8 }, color: '#ffffff' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            activateButton.on('pointerdown', () => scene.activateCyberProtection());
            scene.uiContainer.add(activateButton);
        }

        // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        const infoButton = scene.add.text(0, 230, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#1abc9c' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://gpbmobile.ru/safe');
        });
        scene.uiContainer.add(infoButton);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ —Å—Ç–∞—Ç—å–µ–π
        const articleButton = scene.add.text(0, 180, '–ü—Ä–æ —Ç–æ, –∫–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å—Å—è –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å —Ç—É—Ç.', { fontSize: '24px', color: '#aaffaa', align: 'center', wordWrap: { width: 700 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        articleButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/pro-finance/safety/kak-zashchitit-dengi-na-bankovskoi-karte/');
        });
        scene.uiContainer.add(articleButton);
    }
    // --- –ù–û–í–ê–Ø –ü–ê–ù–ï–õ–¨: –ë–†–û–ö–ï–†–°–ö–ò–ô –°–ß–ï–¢ ---
    else if (type === 'product_broker') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x3498db, 1).fillRoundedRect(-400, -400, 800, 750, 16).strokeRoundedRect(-400, -400, 800, 750, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -350, '–ë—Ä–æ–∫–µ—Ä—Å–∫–∏–π —Å—á–µ—Ç', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -220, '–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ\n–¥–∏–≤–∏–¥–µ–Ω–¥—ã. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n–º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.', { fontSize: '32px', align: 'center', color: '#cccccc' }).setOrigin(0.5));
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const infoButton = scene.add.text(0, 280, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#3498db' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/distance/investapp/'); 
        });
        scene.uiContainer.add(infoButton);
        const backButton = scene.add.text(0, 320, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });
    
        const notificationText = scene.add.text(0, -50, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.brokerPortfolio > 0) {
            const portfolioValue = Math.floor(scene.brokerPortfolio);
            const color = portfolioValue >= 20000 ? '#aaffaa' : '#ffaaaa';
            scene.uiContainer.add(scene.add.text(0, 80, `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è:`, { fontSize: '36px', color: '#ffffff' }).setOrigin(0.5));
            scene.uiContainer.add(scene.add.text(0, 140, `${portfolioValue} –ö–æ–π–Ω–æ–≤`, { fontSize: '48px', color: color }).setOrigin(0.5));
            const sellButton = scene.add.text(0, 240, '[ –ü—Ä–æ–¥–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å ]', { fontSize: '32px', backgroundColor: '#e67e22', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            sellButton.on('pointerdown', () => scene.sellBrokerAccount());
            scene.uiContainer.add(sellButton);
        } else {
            const buyButton = scene.add.text(0, 150, '[ –ö—É–ø–∏—Ç—å –∞–∫—Ü–∏–∏ –Ω–∞ 20000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#2980b9', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            buyButton.on('pointerdown', () => scene.openBrokerAccount());
            scene.uiContainer.add(buyButton);
        }
    }
    // --- –ù–û–í–ê–Ø –ü–ê–ù–ï–õ–¨: –ü–û–î–ü–ò–°–ö–ê "–ë–û–ù–£–° –ü–õ–Æ–°" ---
    else if (type === 'product_bonus_plus') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, '#f1c40f', 1).fillRoundedRect(-400, -350, 800, 650, 16).strokeRoundedRect(-400, -350, 800, 650, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -300, '–ü–æ–¥–ø–∏—Å–∫–∞ "–ë–æ–Ω—É—Å –ü–ª—é—Å"', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -180, '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–ª–æ–≥–æ–≤—ã–µ\n–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ 10%.\n–î–µ–π—Å—Ç–≤—É–µ—Ç 20 –¥–Ω–µ–π.', { fontSize: '32px', align: 'center', color: '#cccccc' }).setOrigin(0.5));
        // –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const infoButton = scene.add.text(0, 190, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#f1c40f' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/page/gazprom-bonus-plus/'); 
        });
        scene.uiContainer.add(infoButton);
        const backButton = scene.add.text(0, 250, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, -20, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        if (scene.isBonusPlusActive) {
            scene.uiContainer.add(scene.add.text(0, 120, `–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n+10% –∫ –Ω–∞–ª–æ–≥–∞–º\n–û—Å—Ç–∞–ª–æ—Å—å: ${scene.bonusPlusDaysLeft} –¥.`, { fontSize: '36px', align: 'center', color: '#f1c40f' }).setOrigin(0.5));
        } else {
            const subscribeButton = scene.add.text(0, 120, '[ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞ 2000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#f39c12', color: '#000000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            subscribeButton.on('pointerdown', () => scene.activateBonusPlus());
            scene.uiContainer.add(subscribeButton);
        }
    }

    // --- –ù–û–í–ê–Ø –ü–ê–ù–ï–õ–¨: –ö–ê–†–¢–ê –ñ–ò–¢–ï–õ–Ø ---
    else if (type === 'product_resident_card') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, '#2ecc71', 1).fillRoundedRect(-400, -350, 800, 650, 16).strokeRoundedRect(-400, -350, 800, 650, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -300, '–ö–∞—Ä—Ç–∞ –∂–∏—Ç–µ–ª—è', { fontSize: '48px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -150, '–í—ã–ø—É—Å–∫ –∫–∞—Ä—Ç –∂–∏—Ç–µ–ª—è —É–ª—É—á—à–∏—Ç\n–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ–≤—ã—Å–∏—Ç —Å—á–∞—Å—Ç—å–µ\n–∏ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π –≤ –≥–æ—Ä–æ–¥.\n\n–ë–æ–Ω—É—Å: +10% —Å—á–∞—Å—Ç—å—è, +5 –Ω–∞—Å–µ–ª–µ–Ω–∏—è', { fontSize: '32px', align: 'center', color: '#cccccc' }).setOrigin(0.5));
        // –ö–Ω–æ–ø–∫–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const infoButton = scene.add.text(0, 200, '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]', { fontSize: '28px', color: '#2ecc71' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        infoButton.on('pointerdown', () => {
            openUrl('https://www.gazprombank.ru/personal/cards/6486911/'); 
        });
        scene.uiContainer.add(infoButton);
        const backButton = scene.add.text(0, 250, '[ –ù–∞–∑–∞–¥ ]', { fontSize: '32px', backgroundColor: '#880000', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        backButton.on('pointerdown', () => { scene.hideCurrentUI(); createUIPanel(scene, 'building'); });

        const notificationText = scene.add.text(0, 50, '', { fontSize: '32px', color: '#ffdddd' }).setOrigin(0.5);
        scene.uiContainer.add([backButton, notificationText]);
        scene.uiContainer.setData('notification', notificationText);

        const issueButton = scene.add.text(0, 150, '[ –í—ã–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—ã –∑–∞ 5000 –ö–æ–π–Ω–æ–≤ ]', { fontSize: '32px', backgroundColor: '#27ae60', padding: { x: 15, y: 8 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        issueButton.on('pointerdown', () => scene.issueResidentCard());
        scene.uiContainer.add(issueButton);
    }
    // --- 4. –ü–ê–ù–ï–õ–¨ –ö–í–ò–ó–ê ---
    else if (type === 'quiz') {
        const quizSet = scene.activeQuiz.set;
        const currentQuestionIndex = scene.activeQuiz.currentQuestionIndex;
        const questionData = quizSet.questions[currentQuestionIndex];

        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xBDCEFA, 1).fillRoundedRect(-450, -500, 900, 1000, 16).strokeRoundedRect(-450, -500, 900, 1000, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -450, quizSet.setName, { fontSize: '48px', color: '#BDCEFA' }).setOrigin(0.5));

        // --- –î–û–ë–ê–í–õ–ï–ù–û: –°—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
        const progressText = `–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} / ${quizSet.questions.length}`;
        scene.uiContainer.add(scene.add.text(0, -400, progressText, { fontSize: '32px', color: '#BDCEFA' }).setOrigin(0.5));
    
        scene.uiContainer.add(scene.add.text(0, -280, questionData.question, { fontSize: '36px', align: 'center', color: '#DEE1EE', wordWrap: { width: 850 } }).setOrigin(0.5));
    
        let yPos = -100;
        questionData.answers.forEach((answer, index) => {
            const answerButtonStyle = { fontSize: '32px', backgroundColor: '#34495e', padding: { x: 20, y: 10 }, color: '#ecf0f1', wordWrap: { width: 700 }, align: 'center'};
            const answerButton = scene.add.text(0, yPos, answer, answerButtonStyle).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
            answerButton.on('pointerdown', () => scene.answerQuiz(index));
            scene.uiContainer.add(answerButton);
            yPos += 150;
        });

        // –°–¥–≤–∏–≥–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∏–∂–µ
        const notificationText = scene.add.text(0, yPos + 20, '', { fontSize: '32px', color: '#ffdddd', align: 'center', wordWrap: { width: 850 } }).setOrigin(0.5);
        scene.uiContainer.add(notificationText);
        scene.uiContainer.setData('notification', notificationText);

        // --- –î–û–ë–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–∫—Ä–µ—Å—Ç–∏–∫) ---
        const closeButton = scene.add.image(450 - 30, -500 + 30, 'close_button').setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => {
            scene.hideCurrentUI();
            scene.activeQuiz = null; // –í–∞–∂–Ω–æ! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–≤–∏–∑, —á—Ç–æ–±—ã –∏–∫–æ–Ω–∫–∞ –º–æ–≥–ª–∞ –ø–æ—è–≤–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
        });
        scene.uiContainer.add(closeButton);
    }

    else if (type === 'level_up') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(4, 0xBDCEFA, 1).fillRoundedRect(-350, -400, 700, 800, 16).strokeRoundedRect(-350, -400, 700, 800, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -320, `–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${data.level}!`, { fontSize: '64px', color: '#58FFFF', stroke: '#000', strokeThickness: 4 }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, '–û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø:', { fontSize: '42px', color: '#ecf0f1' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -100, data.unlocks, { fontSize: '36px', color: '#ddffdd', align: 'center', wordWrap: { width: 650 } }).setOrigin(0.5));
    
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (data.warnings) {
            scene.uiContainer.add(scene.add.text(0, 100, data.warnings, { fontSize: '32px', color: '#ffdddd', align: 'center', wordWrap: { width: 650 } }).setOrigin(0.5));
        }

        const okButton = scene.add.text(0, 320, '[ –û—Ç–ª–∏—á–Ω–æ! ]', { fontSize: '32px', backgroundColor: '#3498db', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        okButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(okButton);
    }
    // --- 5. –ü–ê–ù–ï–õ–¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ü–û–°–¢–†–û–ï–ö ---
    else if (type === 'extra_build') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xeeeeee, 1).fillRoundedRect(-500, -700, 1000, 1400, 16).strokeRoundedRect(-500, -700, 1000, 1400, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -650, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', { fontSize: '48px', color: '#ffffff' }).setOrigin(0.5));

        const activeTabColor = '#3498db'; const inactiveTabColor = '#555555';
        // --- –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –î–õ–Ø –¢–†–ï–• –í–ö–õ–ê–î–û–ö ---
        const economyTab = scene.add.text(-330, -580, '[ –≠–∫–æ–Ω–æ–º–∏–∫–∞ ]', { fontSize: '36px', backgroundColor: activeTabColor, padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        const decorTab = scene.add.text(0, -580, '[ –î–µ–∫–æ—Ä ]', { fontSize: '36px', backgroundColor: inactiveTabColor, padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        const baseTab = scene.add.text(330, -580, '[ –ë–∞–∑–∞ ]', { fontSize: '36px', backgroundColor: inactiveTabColor, padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
    
        const economyContent = scene.add.container(0, 0);
        const decorContent = scene.add.container(0, 0).setVisible(false);
        const baseContent = scene.add.container(0, 0).setVisible(false); // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è "–ë–∞–∑—ã"

        const createButtons = (category, container) => {
            let yPos = -450;
            for (const key in EXTRA_BUILDINGS_DATA) {
                const building = EXTRA_BUILDINGS_DATA[key];
                if (building.category === category) {
                    const isUnlocked = scene.playerLevel >= building.requiredLevel;
                    const canAfford = scene.playerCoins >= building.cost;
                    let buttonText = `[ ${building.name} (${building.cost}) ]`;
                    let bgColor = '#27ae60'; // –ó–µ–ª–µ–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                    if (!isUnlocked) {
                        buttonText = `[ ${building.name} (LVL ${building.requiredLevel}) ]`;
                        bgColor = '#555555'; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                    } else if (!canAfford) {
                        bgColor = '#880000'; // –ö—Ä–∞—Å–Ω—ã–π, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥
                    }
                    const button = scene.add.text(0, yPos, `[ ${building.name} (${building.cost}) ]`, { fontSize: '32px', backgroundColor: bgColor, padding: {x: 15, y: 8} }).setOrigin(0.5);
                    button.setText(buttonText).setBackgroundColor(bgColor);
                    // –ö–Ω–æ–ø–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                    if (isUnlocked && canAfford) {
                        button.setInteractive({ cursor: 'pointer' });
                        // –ü–µ—Ä–µ–¥–∞–µ–º false, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ç–∫–∏
                        button.on('pointerdown', () => scene.enterBuildMode(key, false));
                    }
                    container.add(button);
                    yPos += 100;
                }
            }
        };
    
        // --- –ù–û–í–´–ô –ö–û–î: –°–û–ó–î–ê–ù–ò–ï –ö–ù–û–ü–û–ö –î–õ–Ø –ë–ê–ó–û–í–´–• –≠–õ–ï–ú–ï–ù–¢–û–í ---
        const createBaseButtons = (container) => {
            const baseItems = {
                'slot': { name: '–°–ª–æ—Ç –¥–ª—è –∑–¥–∞–Ω–∏—è', cost: 1000 },
                'road_h': { name: '–î–æ—Ä–æ–≥–∞ (–≥–æ—Ä–∏–∑–æ–Ω—Ç.)', cost: 200 },
                'road_v': { name: '–î–æ—Ä–æ–≥–∞ (–≤–µ—Ä—Ç–∏–∫.)', cost: 200 }
            };
            let yPos = -450;
            for (const key in baseItems) {
                const item = baseItems[key];
                const canAfford = scene.playerCoins >= item.cost;
                const bgColor = canAfford ? '#27ae60' : '#555555';
                const button = scene.add.text(0, yPos, `[ ${item.name} (${item.cost}) ]`, { fontSize: '32px', backgroundColor: bgColor, padding: {x: 15, y: 8} }).setOrigin(0.5);
                if (canAfford) {
                    button.setInteractive({ cursor: 'pointer' });
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º true (—ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å–µ—Ç–∫–∏)
                    button.on('pointerdown', () => scene.enterBuildMode(key, true)); 
                }
                container.add(button);
                yPos += 100;
            }
        };

        createButtons('economy', economyContent);
        createButtons('decor', decorContent);
        createBaseButtons(baseContent); // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
        scene.uiContainer.add([economyTab, decorTab, baseTab, economyContent, decorContent, baseContent]);
    
        // --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø ---
        const setActiveTab = (activeTab) => {
            economyTab.setBackgroundColor(inactiveTabColor);
            decorTab.setBackgroundColor(inactiveTabColor);
            baseTab.setBackgroundColor(inactiveTabColor);
            economyContent.setVisible(false);
            decorContent.setVisible(false);
            baseContent.setVisible(false);

            if (activeTab === 'economy') { economyTab.setBackgroundColor(activeTabColor); economyContent.setVisible(true); }
            else if (activeTab === 'decor') { decorTab.setBackgroundColor(activeTabColor); decorContent.setVisible(true); }
            else if (activeTab === 'base') { baseTab.setBackgroundColor(activeTabColor); baseContent.setVisible(true); }
        };

        economyTab.on('pointerdown', () => setActiveTab('economy'));
        decorTab.on('pointerdown', () => setActiveTab('decor'));
        baseTab.on('pointerdown', () => setActiveTab('base'));

        const closeButton = scene.add.image(500 - 30, -700 + 30, 'close_button').setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(closeButton);
    }

    // --- –ü–ê–ù–ï–õ–¨ –¢–ï–ö–£–©–ï–ì–û –ó–ê–î–ê–ù–ò–Ø (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –ü–ê–†–°–ï–†–ê) ---
    else if (type === 'quest') {
        const quest = QUESTS_DATA[scene.currentQuestId];
        if (!quest) { scene.hideCurrentUI(); return; }

        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xBDCEFA, 1).fillRoundedRect(-450, -450, 900, 900, 16).strokeRoundedRect(-450, -450, 900, 900, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -400, quest.title, { fontSize: '48px', color: '#BDCEFA', align: 'center', wordWrap: { width: 850 } }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, quest.text, { fontSize: '36px', color: '#DEE1EE', align: 'center', wordWrap: { width: 850 } }).setOrigin(0.5));

        if (quest.info) {
            let infoTextContent = quest.info;
            let url = null;
        
            // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –°–°–´–õ–ö–ò
            const urlRegex = /(https?:\/\/[^\s]+)/g;
            const foundUrls = quest.info.match(urlRegex);
        
            if (foundUrls && foundUrls.length > 0) {
                url = foundUrls[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
                // –£–±–∏—Ä–∞–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
                infoTextContent = infoTextContent.replace(url, '').replace('–ü–æ–¥—Ä–æ–±–Ω–µ–µ:', '').trim();
            }

            scene.uiContainer.add(scene.add.text(0, 50, infoTextContent, { fontSize: '32px', color: '#aaccff', align: 'center', wordWrap: { width: 850 } }).setOrigin(0.5));

            if (url) {
                let buttonText = '[ –£–∑–Ω–∞—Ç—å –æ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ ]';
                if (scene.currentQuestId === 13) {
                    buttonText = '[ –ü–æ—á–∏—Ç–∞—Ç—å ]';
                }
                const infoButton = scene.add.text(0, 250, buttonText, { fontSize: '32px', color: '#77aaff' }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
                infoButton.on('pointerdown', () => { openUrl(url); });
                scene.uiContainer.add(infoButton);
            }
        }

        const okButton = scene.add.text(0, 380, '[ –ü–æ–Ω—è—Ç–Ω–æ ]', { fontSize: '32px', backgroundColor: '#3498db', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        okButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(okButton);
    }
    // --- –ü–ê–ù–ï–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–Ø ---
    else if (type === 'quest_complete') {
        const quest = data; // –î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ data

        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(4, 0xBDCEFA, 1).fillRoundedRect(-400, -350, 800, 700, 16).strokeRoundedRect(-400, -350, 800, 700, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -280, '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', { fontSize: '54px', color: '#58FFFF' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -200, `¬´${quest.title}¬ª`, { fontSize: '40px', color: '#ecf0f1' }).setOrigin(0.5));

        scene.uiContainer.add(scene.add.text(0, -50, '–ù–∞–≥—Ä–∞–¥–∞:', { fontSize: '36px', color: '#cccccc' }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, 50, `+ ${quest.reward.coins} –ö–æ–π–Ω–æ–≤\n+ ${quest.reward.xp} XP`, { fontSize: '42px', color: '#ddffdd', align: 'center' }).setOrigin(0.5));

        const okButton = scene.add.text(0, 250, '[ –û—Ç–ª–∏—á–Ω–æ! ]', { fontSize: '32px', backgroundColor: '#3498db', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        okButton.on('pointerdown', () => {
            scene.playConfirmSound();
            scene.hideCurrentUI();
        });
        scene.uiContainer.add(okButton);
    }

    // --- 6. –ü–ê–ù–ï–õ–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ---
    else if (type === 'event_warning') {
        const panel = scene.add.graphics().fillStyle(0x521e26, 1).lineStyle(3, 0xff7777, 1).fillRoundedRect(-450, -300, 900, 600, 16).strokeRoundedRect(-450, -300, 900, 600, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -220, data.title, { fontSize: '64px', color: '#ffdddd', stroke: '#000', strokeThickness: 4 }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -50, data.text, { fontSize: '36px', color: '#cccccc', align: 'center', wordWrap: { width: 800 } }).setOrigin(0.5));

        const okButton = scene.add.text(0, 220, '[ –Ø –ø–æ–Ω—è–ª ]', { fontSize: '32px', backgroundColor: '#c0392b', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        okButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(okButton);
    }

    // --- 7. –ü–ê–ù–ï–õ–¨ –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ü–û–°–¢–†–û–ô–ö–ï ---
    else if (type === 'extra_building_info') {
        const buildingData = EXTRA_BUILDINGS_DATA[data.key];
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xBDCEFA, 1).fillRoundedRect(-250, -150, 500, 300, 16).strokeRoundedRect(-250, -150, 500, 300, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -100, buildingData.name, { fontSize: '40px', color: '#BDCEFA' }).setOrigin(0.5));

        let yPos = -20;
        if (buildingData.bonuses) {
            if (buildingData.bonuses.income) {
                scene.uiContainer.add(scene.add.text(0, yPos, `üí∞ ${buildingData.bonuses.income.text}`, { fontSize: '36px', color: '#DEE1EE' }).setOrigin(0.5));
                yPos += 60;
            }
            if (buildingData.bonuses.happiness) {
                 scene.uiContainer.add(scene.add.text(0, yPos, `üòä ${buildingData.bonuses.happiness.text}`, { fontSize: '36px', color: '#DD41DB' }).setOrigin(0.5));
            }
        }

        const closeButton = scene.add.image(250 - 25, -150 + 25, 'close_button').setScale(0.8).setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(closeButton);
    }

    // --- 8. –ü–ê–ù–ï–õ–¨ –§–ò–ù–ê–ù–°–û–í–û–ì–û –ñ–£–†–ù–ê–õ–ê ---
    else if (type === 'financial_log') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(2, 0xeeeeee, 1).fillRoundedRect(-450, -600, 900, 1200, 16).strokeRoundedRect(-450, -600, 900, 1200, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -550, '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ñ—É—Ä–Ω–∞–ª', { fontSize: '48px', color: '#ffffff' }).setOrigin(0.5));
    
        // –ï—Å–ª–∏ –ª–æ–≥ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (scene.financialLog.length === 0) {
            scene.uiContainer.add(scene.add.text(0, 0, '–ü–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.', { fontSize: '32px', color: '#999999' }).setOrigin(0.5));
        } else {
            let yPos = -480;
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ª–æ–≥—É –∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
            for (const entry of scene.financialLog) {
                let entryColor = '#ffffff'; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (entry.type === 'income') {
                    entryColor = '#2ecc71'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
                } else if (entry.type === 'expense') {
                    entryColor = '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                }

                const logText = scene.add.text(-420, yPos, entry.message, { fontSize: '32px', color: entryColor, wordWrap: { width: 840 } }).setOrigin(0, 0);
                scene.uiContainer.add(logText);
            
                yPos += logText.height + 15; // –°–¥–≤–∏–≥–∞–µ–º—Å—è –≤–Ω–∏–∑ –Ω–∞ –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞ + –æ—Ç—Å—Ç—É–ø
            
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –ø–∞–Ω–µ–ª–∏
                if (yPos > 550) break;
            }
        }

        const closeButton = scene.add.image(450 - 30, -600 + 30, 'close_button').setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(closeButton);
    }

    // --- 9. –ü–ê–ù–ï–õ–¨ –°–ü–ò–°–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô ---
    else if (type === 'achievements_list') {
        const panel = scene.add.graphics().fillStyle(0x1a2530, 1).lineStyle(2, 0x77aaff, 1).fillRoundedRect(-450, -700, 900, 1400, 16).strokeRoundedRect(-450, -700, 900, 1400, 16);
        scene.uiContainer.add(panel);
        scene.uiContainer.add(scene.add.text(0, -650, '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', { fontSize: '48px', color: '#ffffff' }).setOrigin(0.5));
    
        let yPos = -550;
        for (const key in ACHIEVEMENTS_DATA) {
            const achievement = ACHIEVEMENTS_DATA[key];
            const isUnlocked = scene.unlockedAchievements.has(key);
        
            const iconKey = isUnlocked ? key : `${key}_disabled`;
            const textColor = isUnlocked ? '#ecf0f1' : '#7f8c8d';

            // –ò–∫–æ–Ω–∫–∞
            scene.uiContainer.add(scene.add.image(-350, yPos, iconKey).setScale(0.8));
            // –ù–∞–∑–≤–∞–Ω–∏–µ
            scene.uiContainer.add(scene.add.text(-250, yPos - 20, achievement.name, { fontSize: '32px', color: textColor }).setOrigin(0, 0.5));
            // –û–ø–∏—Å–∞–Ω–∏–µ
            scene.uiContainer.add(scene.add.text(-250, yPos + 25, achievement.description, { fontSize: '24px', color: '#95a5a6' }).setOrigin(0, 0.5));
        
            yPos += 150;
            if (yPos > 600) break; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞—á–∏–≤–æ–∫ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ
        }

        const closeButton = scene.add.image(450 - 30, -700 + 30, 'close_button').setInteractive({ cursor: 'pointer' });
        closeButton.on('pointerdown', () => scene.hideCurrentUI());
        scene.uiContainer.add(closeButton);
    }

    // --- 10. –ü–ê–ù–ï–õ–¨ –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ë–û–ù–£–°–ê ---
    else if (type === 'daily_bonus') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(4, 0xBDCEFA, 1).fillRoundedRect(-400, -350, 800, 700, 16).strokeRoundedRect(-400, -350, 800, 700, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -250, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å!', { fontSize: '64px', color: '#58FFFF', stroke: '#000', strokeThickness: 4 }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, -150, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∑–∞—à–ª–∏ –≤ –ö–∞–ø–∏—Ç–∞–ª –°–∏—Ç–∏!', { fontSize: '32px', color: '#ecf0f1' }).setOrigin(0.5));
    
        // –ó–¥–µ—Å—å data.amount - —ç—Ç–æ —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º
        scene.uiContainer.add(scene.add.text(0, 50, `–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞:\n+ ${data.amount} –ö–æ–π–Ω–æ–≤`, { fontSize: '48px', color: '#ddffdd', align: 'center' }).setOrigin(0.5));

        const okButton = scene.add.text(0, 250, '[ –ó–∞–±—Ä–∞—Ç—å ]', { fontSize: '32px', backgroundColor: '#000000', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
    
        okButton.on('pointerdown', () => {
            scene.playConfirmSound();
            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
            scene.playerCoins += data.amount;
            scene.coinsText.setText(scene.playerCoins);
            scene.showIncomeAnimation(data.amount, '#f1c40f', '–ë–æ–Ω—É—Å +');
            scene.addFinancialLog(`+${data.amount}–ö (–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å)`, 'income');
        
            scene.hideCurrentUI();
        });
        scene.uiContainer.add(okButton);
    }

    // --- 11. –ü–ê–ù–ï–õ–¨ –ö–†–£–ü–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–ù–û–í–ê–Ø) ---
    else if (type === 'major_notification') {
        const panel = scene.add.graphics().fillStyle(0x060698, 1).lineStyle(4, 0x2ecc71, 1).fillRoundedRect(-400, -300, 800, 600, 16).strokeRoundedRect(-400, -300, 800, 600, 16);
        scene.uiContainer.add(panel);

        scene.uiContainer.add(scene.add.text(0, -180, data.title, { fontSize: '64px', color: '#ddffdd', stroke: '#000', strokeThickness: 4 }).setOrigin(0.5));
        scene.uiContainer.add(scene.add.text(0, 0, data.text, { fontSize: '48px', color: '#ecf0f1', align: 'center', wordWrap: { width: 700 } }).setOrigin(0.5));

        const okButton = scene.add.text(0, 200, '[ –û—Ç–ª–∏—á–Ω–æ! ]', { fontSize: '32px', backgroundColor: '#27ae60', padding: { x: 20, y: 10 } }).setOrigin(0.5).setInteractive({ cursor: 'pointer' });
        okButton.on('pointerdown', () => {
            scene.playConfirmSound();
            scene.hideCurrentUI();
        });
        scene.uiContainer.add(okButton);
    }
    // --- 12. –ü–ê–ù–ï–õ–¨ –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ---
    else if (type === 'welcome_screen') {
        // –ü–ê–¢–ß 2: –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–∞–Ω–µ–ª–∏
        const panelHeight = 1300; 
        const yOffset = 60;
        const panelGfx = scene.add.graphics();
        panelGfx.fillGradientStyle(0x1A1A3D, 0x0A0A2A, 0x1A1A3D, 0x0A0A2A, 1);
        panelGfx.fillRoundedRect(-500, -panelHeight/2, 1000, panelHeight, 16);
        panelGfx.lineStyle(3, 0x58FFFF, 0.8);
        panelGfx.strokeRoundedRect(-500, -panelHeight/2, 1000, panelHeight, 16);
        const title = scene.add.text(0, -panelHeight/2 + 80 + yOffset, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', { fontFamily: '"Halvar Breitschrift"', fontSize: '52px', color: '#ffffff', shadow: { color: '#58FFFF', blur: 15, fill: true } }).setOrigin(0.5);
        scene.uiContainer.add([panelGfx, title]);
    
        let yPos = -450 + yOffset;
        const textStyle = { fontFamily: '"Gazprombank Sans"', fontSize: '32px', color: '#cccccc', wordWrap: { width: 650 } }; // <-- –£–º–µ–Ω—å—à–∏–ª–∏ —à–∏—Ä–∏–Ω—É –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
        const rowSpacing = 120;
        const textX = -420; // <-- –ü–ê–¢–ß 1: –°–¥–≤–∏–Ω—É–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–µ–µ

        const text1 = scene.add.text(textX, yPos, '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –æ—Ç –¥–µ–º–æ–≤–µ—Ä—Å–∏–∏, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã.', textStyle).setOrigin(0, 0.5);
        const icon1 = scene.add.image(380, yPos, 'quest_icon'); // <-- –°–¥–≤–∏–Ω—É–ª–∏ –∏–∫–æ–Ω–∫—É –ª–µ–≤–µ–µ
        scene.uiContainer.add([text1, icon1]);
        yPos += rowSpacing;

        const text2 = scene.add.text(textX, yPos, '–°—Ç—Ä–æ–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–¥–∞–Ω–∏—è, –∫–ª–∏–∫–∞—è –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ.', textStyle).setOrigin(0, 0.5);
        const icon2 = scene.add.image(380, yPos, 'slot').setScale(0.45); // <-- –ü–ê–¢–ß 1: –î–æ–±–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–∫–æ–Ω–∫—É
        scene.uiContainer.add([text2, icon2]);
        yPos += rowSpacing;

        const text3 = scene.add.text(textX, yPos, '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π –∏ –¥–µ–∫–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.', textStyle).setOrigin(0, 0.5);
        const icon3 = scene.add.image(380, yPos, 'build_icon');
        scene.uiContainer.add([text3, icon3]);
        yPos += rowSpacing;

        const text4 = scene.add.text(textX, yPos, '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤ –æ–ø—ã—Ç–∞ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∫–≤–∏–∑—ã, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.', textStyle).setOrigin(0, 0.5);
        const icon4 = scene.add.image(380, yPos, 'quiz_icon');
        scene.uiContainer.add([text4, icon4]);
        yPos += 150;

        const finalText = scene.add.text(0, yPos + 20, '–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ, —É–∫—Ä–∞—à–∞–π—Ç–µ –µ–≥–æ –∏ –¥–µ–ª–∞–π—Ç–µ –∂–∏—Ç–µ–ª–µ–π —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ!', { fontFamily: '"Gazprombank Sans"', fontSize: '34px', color: '#ecf0f1', align: 'center', wordWrap: { width: 900 } }).setOrigin(0.5);
        scene.uiContainer.add(finalText);

        const startButtonGfx = scene.add.graphics();
        startButtonGfx.fillStyle(0x000000, 1);
        startButtonGfx.fillRoundedRect(-275, -45, 550, 90, 45);
        const startButtonText = scene.add.text(0, 0, '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', { fontFamily: '"Gazprombank Sans"', fontSize: '32px', color: '#ffffff' }).setOrigin(0.5);
        const startButton = scene.add.container(0, yPos + 180 + yOffset, [startButtonGfx, startButtonText])
            .setSize(550, 90)
            .setInteractive({ useHandCursor: true })
            .on('pointerdown', () => {
                scene.startGameFirstTime();
                scene.playConfirmSound();
            });
        
        scene.uiContainer.add(startButton);
    }

}

/**
 * –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä UI –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã.
 * @param {Phaser.Scene} scene - –¢–µ–∫—É—â–∞—è –∏–≥—Ä–æ–≤–∞—è —Å—Ü–µ–Ω–∞.
 */
function hideCurrentUI(scene) {
    if (scene.uiContainer) {
        scene.uiContainer.destroy();
        scene.uiContainer = null;
    }
    document.getElementById('deposit-input').style.display = 'none';

    // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –æ–∫–Ω–∞ –Ω–µ "—Å–ª–∏–ø–ª–∏—Å—å"
    scene.time.delayedCall(100, () => {
        scene.processUIQueue();
    });
}

function openUrl(url) {
    window.open(url, '_blank');
}